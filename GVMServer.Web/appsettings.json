{
    "ConfiguredHotUpdates": true, // 配置热更新
    "Redis": {
        "readWriteHosts": [ "127.0.0.1:6379" ], // 主节点集群（password@serverip:port）
        "readOnlyHosts": [ "127.0.0.1:6379" ], // 从节点集群
        "MaxWritePoolSize": 8,
        "MaxReadPoolSize": 8,
        "PoolSizeMultiplier": 32,
        "PoolTimeOutSeconds": 20
    },
    "Web": { // 服务器控制了客户端请求的最低流速，它不应低于240字节一个脉冲速度，最大宽限期为5个S，否则此链接将被强制掐断；
        "RespectBrowserAcceptHeader": true, // 优先考虑浏览器请求头
        "ReturnHttpNotAcceptable": true, // LINUX上提高服务器I/O吞吐量时，你应该开启BBR，而在Win32服务器上则应开启SS。
        "UseDirectoryBrowser": true, // 使用目录浏览器
        "AllowSynchronousIO": true, // 允许同步IO，默认情况下为完全异步IO。
        "MaxRequestBodySize": 65535, // 最大请求正文大小（超出此大小的链接将被强制掐断，理论上64K左右的报文大小是足够的。）
        "AddConsoleAndAddDebugLogger": false, // 添加控制台回显的同时添加调试日志
        "GetIPAddressFromHttpHeaders": false, // 从HTTP协议上获取IP地址
        "ForwardedForKnownProxies": [ "10.0.0.100" ], // 默认情况下仅信任 localhost (127.0.0.1, [::1]) 上运行的代理（转发）。
        "ConcurrentConnections": {
            "MinHandlingWorkerCount": 4, // 最小处理工作者数量
            "MinCompletionPortCount": 8, // 最小完成端口数量
            "MaxHandlingWorkerCount": 100, // 最大处理工作者数量（此值不意味着越大越好，越大所需要的CPU资源则越多）。
            "MaxCompletionPortCount": 300 // 最大完成端口数量（此值不意味着越大越好，越大所需要的CPU资源则越多）。
        },
        "MinResponseDataRate": { // 最小响应数据流速（全部设置为-1则表示不限制）。
            "BytesPerSecond": 240, // 脉冲流速
            "GracePeriod": 5 // 宽限期
        },
        "MinRequestBodyDataRate": { // 最小请求数据流速（全部设置为-1则表示不限制）。
            "BytesPerSecond": 240, // 脉冲流速
            "GracePeriod": 5 // 宽限期
        },
        "UseHttpSys": false,
        "Prefixes": [ "http://*:8801", "http://*:7801" ], // 侦听的载荷协议及域，本服务器不建议设定SSL（不然要搞x509），但你可以在NGINX之中配置SSL
        "RewriteRawUriQueryString": true // 重写原URL查询字符串
    },
    "Json": {
        "NotMinHumpFormat": false,
        "DateTimeFormat": "yyyy-MM-dd HH:mm:ss",
        "Indented": false,
        "NullValueHandling": false
    },
    "Business": {
        "Service": {
            "Account": {
                "LoginTokenExpiredTime": 300, // 登录令牌过期时间（单位：秒）
                "LoginTokenReuseTimes": 0, // 登录令牌可重用次数
                "SelectTokenExpiredTime": 300, // 选服令牌过期时间
                "SelectTokenReuseTimes": 0, // 选服令牌可重用次数
                "PlatformTokenExpiredTime": 300, // 平台令牌过期时间（单位：秒）
                "AcquireLockTimeout": 10, // 需求锁的超时时间（单位：秒）
                "IPMustIsIPV4Format": false, // IP必须是IPV4格式
                "ValidateServerAreaToken": false, // 需要验证登录区域服务器令牌？
                "ValidateIgnoreContents": false, // 忽略验证响应内容
                "LoginTimeUsePutDotAsync": true, // 登录时使用异步打点
                "UseDbAccountId": false, // 使用数据库中的账户ID
                "UseHotCachedOptimization": false, // 使用热点缓存优化
                "NotSignInNotPlatformValidate": false, // 非登入不在平台验证
                "MaxLoginToPlatformTimeout": 10000, // 最大登录到平台超时时间
                "AllowPrintAccountLoginErrorInfo": true // 允许打印账号登录错误信息
            },
            "CdKey": {
                "AcquireLockTimeout": 10 // 需求锁的超时时间（单位：秒）
            },
            "Entities": {
                "SwitchListBooleanKeys": [ // 入口切换控制列表布尔类型键名数列。
                    "audit_version",
                    "countly_report",
                    "error_screen",
                    "log_print",
                    "update_assets"
                ]
            }
        }
    },
    "Data": "GVMServer.Web",
    "Database": {
        "MySql": { // 不要随意的FLUSHALL分布式缓存否则这可能造成严重的数据库被穿透，增大数据集群的负载；服务器具有HOT线性优化。
            "PartitionTableSizeOf": 500000, // 分区表长度
            "PartitionTableCount": 9, // 分区表总数
            "Usable": true, // 是否使用数据库功能
            "DataNodes": [
                {
                    "Master": { // 主写入库（MySQL连接池中对于MASTER的链接全部完蛋时，
                        "Server": "172.0.6.130", // 警告：两个DBSVR完蛋时，服务器将抛出严重服务器内部错误。
                        "Port": "3306",
                        "UserName": "sa", // 此意味着DBSVR已完蛋；那么它将切换备用写库，
                        "Password": "sa", // 注意：数据节点存储服务器架构必须指定为双机
                        "Database": "wglobal" // 热备，即：A <----> B cluster
                    },
                    "Salve": { // 备写入库
                        "Server": "172.0.6.130",
                        "Port": "3306",
                        "UserName": "sa",
                        "Password": "sa",
                        "Database": "wglobal"
                    }
                }
            ]
        },
        "Mongo": {
            "connectionsString": "mongodb://172.0.6.130:27017"
        }
    },
    "Logging": {
        "IncludeScopes": false,
        "LogLevel": {
            "Default": "Debug",
            "System": "Information",
            "Microsoft": "Information"
        },
        "Root": "./log"
    },
    "Servers": {
        "9997": {
            "ServerId": "9997",
            "ChatServer": {
                "Address": "193.168.1.243",
                "Port": 8833
            },
            "GameServer": {
                "Address": "193.168.1.243",
                "Port": 8811
            },
            "AreaId": 14,
            "Platform": "xiyou",
            "UpdateUri": "*"
        }
    },
    "XiYouSdk": {
        "PaidMustEffective": true, // PAID必须有效（不可以为NULL也不可以是空的）。
        "Classify": { // 分类
            "Android": {
                "PackageName": "com.qld.jhlkx",
                "AppId": "106448802467",
                "AppKey": "8fcb114296db7edaa9445f185be7176b",
                "AppSecret": "SdDextwdmwXd33LpYEWzazDDpLS300XX"
            },
            "Ios": {
                "PackageName": "com.qld.dxll.xiyoui",
                "AppId": "102858234828",
                "AppKey": "16b1b52fc302a0c9c7de9bdd597f08a9",
                "AppSecret": "pu1VVUru1nFk1vjf1R7lfxXp9FzJXpNn"
            }
        },
        "DotContrastTable": { // 打点对照表
            "120": {
                "Code": 120,
                "Behavior": "attachBaseContext",
                "No": 1,
                "Caller": "客户端",
                "Action": "application开始"
            },
            "150": {
                "Code": 150,
                "Behavior": "onCreate",
                "No": 3,
                "Caller": "客户端",
                "Action": "application执行完成"
            },
            "151": {
                "Code": 151,
                "Behavior": "onCreate",
                "No": 4,
                "Caller": "客户端",
                "Action": "游戏Activity onCreate"
            },
            "180": {
                "Code": 180,
                "No": 6,
                "Caller": "客户端",
                "Action": "游戏Activity页面启动完成"
            },
            "210": {
                "Code": 210,
                "No": 8,
                "Caller": "客户端",
                "Action": "调用SDK初始化-开始"
            },
            "240": {
                "Code": 240,
                "No": 9,
                "Caller": "客户端",
                "Action": "调用SDK初始化-完成"
            },
            "241": {
                "Code": 241,
                "No": 10,
                "Caller": "客户端",
                "Action": "初始化回调成功"
            },
            "270": {
                "Code": 270,
                "No": 12,
                "Caller": "客户端",
                "Action": "游戏初始化-完成"
            },
            "271": {
                "Code": 271,
                "Behavior": "onResume",
                "No": 13,
                "Caller": "客户端",
                "Action": "游戏Activity onResume"
            },
            "300": {
                "Code": 300,
                "No": 15,
                "Caller": "客户端",
                "Action": "游戏登录页面渲染-完成"
            },
            "301": {
                "Code": 301,
                "No": 16,
                "Caller": "客户端",
                "Action": "游戏调用SDK登录-开始"
            },
            "329": {
                "Code": 329,
                "No": 17,
                "Caller": "客户端",
                "Action": "SDK登录回调成功"
            },
            "330": {
                "Code": 330,
                "No": 18,
                "Caller": "服务端",
                "Action": "Token换UserInfo"
            },
            "360": {
                "Code": 360,
                "No": 21,
                "Caller": "客户端",
                "Action": "登录流程完成"
            },
            "380": {
                "Code": 380,
                "No": 22,
                "Caller": "客户端",
                "Action": "调用获取区服列表-开始"
            },
            "400": {
                "Code": 400,
                "No": 23,
                "Caller": "客户端",
                "Action": "SDK区服列表回调成功"
            },
            "430": {
                "Code": 430,
                "No": 25,
                "Caller": "客户端",
                "Action": "点击选择区服按钮"
            },
            "480": {
                "Code": 480,
                "No": 27,
                "Caller": "客户端",
                "Action": "点击选择游戏某一区服"
            },
            "481": {
                "Code": 481,
                "No": 28,
                "Caller": "客户端",
                "Action": "点击进入游戏按钮（进入创建角色页面）"
            },
            "521": {
                "Code": 521,
                "No": 30,
                "Caller": "客户端",
                "Action": "创建角色完成进入游戏"
            },
            "541": {
                "Code": 541,
                "No": 31,
                "Caller": "客户端",
                "Action": "点击计费项支付-开始"
            },
            "542": {
                "Code": 542,
                "No": 32,
                "Caller": "客户端",
                "Action": "客户端向游戏服发起生成订单请求-开始"
            },
            "572": {
                "Code": 572,
                "No": 34,
                "Caller": "服务端",
                "Action": "游戏服向西游服发起生成订单-开始"
            },
            "573": {
                "Code": 573,
                "No": 35,
                "Caller": "服务端",
                "Action": "游戏服向西游服发起生成订单-成功"
            },
            "574": {
                "Code": 574,
                "No": 36,
                "Caller": "客户端",
                "Action": "客户端向游戏服发起生成订单请求-完成"
            },
            "604": {
                "Code": 604,
                "No": 37,
                "Caller": "客户端",
                "Action": "SDK生成订单回调成功"
            },
            "610": {
                "Code": 610,
                "No": 38,
                "Caller": "客户端",
                "Action": "调用SDK支付-开始"
            },
            "630": {
                "Code": 630,
                "No": 39,
                "Caller": "客户端",
                "Action": "调用SDK支付-完成"
            },
            "660": {
                "Code": 660,
                "No": 41,
                "Caller": "客户端",
                "Action": "SDK支付回调"
            },
            "700": {
                "Code": 700,
                "No": 42,
                "Caller": "服务端",
                "Action": "游戏服收到西游服回调"
            },
            "730": {
                "Code": 730,
                "No": 44,
                "Caller": "客户端",
                "Action": "支付流程执行完成"
            },
            "750": {
                "Code": 750,
                "No": 45,
                "Caller": "客户端",
                "Action": "判断是否有注销功能"
            },
            "751": {
                "Code": 751,
                "No": 46,
                "Caller": "客户端",
                "Action": "调用sdk注销-开始"
            },
            "770": {
                "Code": 770,
                "No": 47,
                "Caller": "客户端",
                "Action": "调用sdk注销-完成"
            },
            "771": {
                "Code": 771,
                "No": 48,
                "Caller": "客户端",
                "Action": "SDK注销回调成功"
            },
            "772": {
                "Code": 772,
                "No": 49,
                "Caller": "客户端",
                "Action": "调用sdk退出-开始"
            },
            "790": {
                "Code": 790,
                "No": 50,
                "Caller": "客户端",
                "Action": "调用sdk退出-完成"
            },
            "791": {
                "Code": 791,
                "No": 51,
                "Caller": "客户端",
                "Action": "SDK退出回调成功"
            },
            "792": {
                "Code": 792,
                "Behavior": "onDestroy",
                "No": 52,
                "Caller": "客户端",
                "Action": "游戏Activity onDestroy"
            },
            "800": {
                "Code": 800,
                "Behavior": "onPause",
                "No": 53,
                "Caller": "客户端",
                "Action": "游戏Activity onPause"
            }
        }
    }
}